heat_template_version: 2013-05-23

description: Deploy a CoreOS cluster that tracks the Stable Channel

parameters:
  count:
    description: Number of CoreOS machines to deploy
    type: number
    default: 3
    constraints:
    - range:
        min: 1
        max: 12
      description: Must be between 3 and 12 servers.
  flavor:
    type: string
    default: 2 GB Performance
    constraints:
    - allowed_values:
      - 1 GB Performance
      - 2 GB Performance
      - 4 GB Performance
      - 8 GB Performance
      - 15 GB Performance
      - 30 GB Performance
      description: |
        Must be a valid Rackspace Cloud Server flavor for the region you have
        selected to deploy into.
  image:
    type: string
    default: CoreOS (Stable)
    constraints:
    - allowed_values:
      - CoreOS (Alpha) # alpha
      - CoreOS (Beta) # beta
      - CoreOS (Stable) # stable
  name:
    type: string
    description: Name of each CoreOS machine booted
    default: CoreOS-MySQL
  etcd_discovery:
    type: string
    description: URL of etcd discovery
    default: master
  network_range:
    label: Private Network CIDR
    description: Private Network to use for CoreOS Communications
    type: string
    default: 192.168.224.0/20

resources:

  ssh_key:
    type: "OS::Nova::KeyPair"
    properties:
      name: { get_param: name }
      save_private_key: true

  coreos_network:
    type: Rackspace::Cloud::Network
    properties:
      label: { get_param: name }
      cidr: { get_param: network_range }

  coreos_nodes:
    type: "OS::Heat::ResourceGroup"
    properties:
      count: { get_param: count }
      resource_def:
        type: OS::Nova::Server
        properties:
          key_name: { get_resource: ssh_key }
          image: "CoreOS (Beta)"
          flavor: { get_param: flavor }
          name: { get_param: name }
          networks:
          - uuid: "00000000-0000-0000-0000-000000000000"
          - uuid: { get_resource: coreos_network }
          user_data_format: RAW
          config_drive: "true"
          user_data:
            str_replace:
              template: |
                #cloud-config
                ---
                write_files:
                  - path:  /etc/iptables.rules
                    permissions: 0600
                    content: |
                      *filter
                      :INPUT ACCEPT [0:0]
                      :FORWARD ACCEPT [0:0]
                      :OUTPUT ACCEPT [0:0]
                      -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
                      -A INPUT -p tcp --dport 22 -j ACCEPT
                      -A INPUT -i lo -j ACCEPT
                      -A INPUT -p icmp --icmp-type echo-reply -j ACCEPT
                      -A INPUT -p icmp --icmp-type destination-unreachable -j ACCEPT
                      -A INPUT -p icmp --icmp-type time-exceeded -j ACCEPT
                      -A INPUT -p tcp -i eth0 --dport 3306 -j ACCEPT
                      -A INPUT -p tcp -i eth0 --dport 4001 -j DROP
                      -A INPUT -p tcp -i eth0 --dport 7001 -j DROP
                      -A INPUT -i eth0 -j DROP
                      COMMIT
                  - path: /etc/profile.d/db-functions.sh
                    permissions: '0755'
                    content: |
                      function nse() {
                        sudo nsenter --pid --uts --mount --ipc --net --target $(docker inspect --format="{{ .State.Pid }}" $1)
                      }
                      function dev_db() {
                        eval `cat /etc/environment`
                        /usr/bin/docker run -it -e DEBUG=1 -p 3306:3306 -p 4444:4444 -p 4567:4567 -p 4568:4568 -e PUBLISH=3306 -e HOST=$COREOS_PRIVATE_IPV4 -e CLUSTER=galera paulczar/percona-galera:latest bash
                      }
                      function database() {
                        sudo nsenter --pid --uts --mount --ipc --net --target $(docker inspect --format="{{ .State.Pid }}" database)
                      }
                      function rebuild() {
                        docker build -t paulczar/percona-galera /home/core/share
                      }
                      function cleanup() {
                        etcdctl rm --recursive /database
                      }
                      function logs() {
                        journalctl -u -f database.service
                      }
                coreos:
                  update:
                    reboot-strategy: best-effort
                  etcd:
                    # generate a new token for each unique cluster from https://discovery.etcd.io/new
                    # uncomment the following line and replace it with your discovery URL
                    addr: $private_ipv4:4001
                    peer-addr: $private_ipv4:7001
                    discovery: %etcd_discovery%
                  fleet:
                  units:
                  - name: etcd.service
                    command: start
                  - name: fleet.service
                    command: start
                  - name: firewall.service
                    command: start
                    content: |
                      [Unit]
                      Description=firewall
                      DefaultDependencies=no
                      After=systemd-sysctl.service
                      Before=sysinit.target
                      [Service]
                      Type=oneshot
                      RemainAfterExit=yes
                      ExecStart=/sbin/iptables-restore /etc/iptables.rules
                      ExecReload=/usr/sbin/iptables-restore /etc/iptables.rules
                      ExecStop=/usr/sbin/iptables --flush
                      RemainAfterExit=yes
                      [Install]
                      WantedBy=sysinit.target
                  - name: database-data.service
                    command: start
                    enable: true
                    content: |
                      [Unit]
                      Description=database data
                      After=docker.service
                      [Service]
                      Type=oneshot
                      RemainAfterExit=yes
                      ExecStartPre=/usr/bin/docker pull paulczar/percona-galera:latest
                      ExecStart=/bin/sh -c "/usr/bin/docker inspect database-data >/dev/null 2>&1 || docker run --name database-data -v /var/lib/mysql paulczar/percona-galera:latest true"
                  - name: database.service
                    command: start
                    enable: true
                    content: |
                      [Unit]
                      Description=database
                      After=database-data.service
                      [Service]
                      Restart=always
                      EnvironmentFile=/etc/environment
                      TimeoutStartSec=20m
                      ExecStartPre=/usr/bin/docker pull paulczar/percona-galera:latest
                      ExecStart=/bin/sh -c "/usr/bin/docker run --name database --rm -p 3306:3306 -p 4444:4444 -p 4567:4567 -p 4568:4568 -e PUBLISH=3306 -e HOST=$COREOS_PRIVATE_IPV4 -e CLUSTER=galera --volumes-from database-data paulczar/percona-galera:latest"
                      ExecStop=/usr/bin/docker stop database
              params:
                "%ssh_private_key%": { get_attr: [ssh_key, private_key] }
                "%etcd_discovery%": { get_param: etcd_discovery }

  coreos_loadbalancer:
    type: Rackspace::Cloud::LoadBalancer
    properties:
      name: { get_param: name }
      nodes:
      - addresses: { get_attr: [coreos_nodes, accessIPv4]} # This is where the
                                                       # wiring magic happens
        port: 3306
        condition: ENABLED
      protocol: MYSQL
      port: 3306
      virtualIps:
      - type: PUBLIC
        ipVersion: IPV4

outputs:
  loadbalancer:
    description: The public IP address of the load balancer
    value: { get_attr: [coreos_loadbalancer, PublicIp]}
  public_ips:
    description: The public IP addresses of coreos nodes
    value: { get_attr: [coreos_nodes, accessIPv4]}
  networks:
    description: The networks of the coreos nodes.
    value: { get_attr: [coreos_nodes, networks]}
  private_key:
    description: SSH Private Key
    value: { get_attr: [ssh_key, private_key] }
  etcd_discovery:
    description: etcd discovery URL
    value: { get_param: etcd_discovery }
